// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: fbaa.proto

package fbaa

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Rarity int32

const (
	Rarity_COMMON    Rarity = 0
	Rarity_UNCOMMON  Rarity = 1
	Rarity_RARE      Rarity = 2
	Rarity_LEGENDARY Rarity = 3
)

// Enum value maps for Rarity.
var (
	Rarity_name = map[int32]string{
		0: "COMMON",
		1: "UNCOMMON",
		2: "RARE",
		3: "LEGENDARY",
	}
	Rarity_value = map[string]int32{
		"COMMON":    0,
		"UNCOMMON":  1,
		"RARE":      2,
		"LEGENDARY": 3,
	}
)

func (x Rarity) Enum() *Rarity {
	p := new(Rarity)
	*p = x
	return p
}

func (x Rarity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rarity) Descriptor() protoreflect.EnumDescriptor {
	return file_fbaa_proto_enumTypes[0].Descriptor()
}

func (Rarity) Type() protoreflect.EnumType {
	return &file_fbaa_proto_enumTypes[0]
}

func (x Rarity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rarity.Descriptor instead.
func (Rarity) EnumDescriptor() ([]byte, []int) {
	return file_fbaa_proto_rawDescGZIP(), []int{0}
}

type SpecialAbility int32

const (
	SpecialAbility_FLYING             SpecialAbility = 0
	SpecialAbility_TELEPORTATION      SpecialAbility = 1
	SpecialAbility_INVISIBILITY       SpecialAbility = 2
	SpecialAbility_SHAPESHIFTING      SpecialAbility = 3
	SpecialAbility_FIRE_BREATHING     SpecialAbility = 4
	SpecialAbility_TELEPATHY          SpecialAbility = 5
	SpecialAbility_ICE_MAGIC          SpecialAbility = 6
	SpecialAbility_ELECTRIC_DISCHARGE SpecialAbility = 7
	SpecialAbility_REGENERATION       SpecialAbility = 8
)

// Enum value maps for SpecialAbility.
var (
	SpecialAbility_name = map[int32]string{
		0: "FLYING",
		1: "TELEPORTATION",
		2: "INVISIBILITY",
		3: "SHAPESHIFTING",
		4: "FIRE_BREATHING",
		5: "TELEPATHY",
		6: "ICE_MAGIC",
		7: "ELECTRIC_DISCHARGE",
		8: "REGENERATION",
	}
	SpecialAbility_value = map[string]int32{
		"FLYING":             0,
		"TELEPORTATION":      1,
		"INVISIBILITY":       2,
		"SHAPESHIFTING":      3,
		"FIRE_BREATHING":     4,
		"TELEPATHY":          5,
		"ICE_MAGIC":          6,
		"ELECTRIC_DISCHARGE": 7,
		"REGENERATION":       8,
	}
)

func (x SpecialAbility) Enum() *SpecialAbility {
	p := new(SpecialAbility)
	*p = x
	return p
}

func (x SpecialAbility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecialAbility) Descriptor() protoreflect.EnumDescriptor {
	return file_fbaa_proto_enumTypes[1].Descriptor()
}

func (SpecialAbility) Type() protoreflect.EnumType {
	return &file_fbaa_proto_enumTypes[1]
}

func (x SpecialAbility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecialAbility.Descriptor instead.
func (SpecialAbility) EnumDescriptor() ([]byte, []int) {
	return file_fbaa_proto_rawDescGZIP(), []int{1}
}

type CreatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DateAdded   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=dateAdded,proto3" json:"dateAdded,omitempty"`
	Name        string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Rarity      Rarity               `protobuf:"varint,4,opt,name=rarity,proto3,enum=fbaa.Rarity" json:"rarity,omitempty"`
	Species     string               `protobuf:"bytes,5,opt,name=species,proto3" json:"species,omitempty"`
	Description string               `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Age         int32                `protobuf:"varint,7,opt,name=age,proto3" json:"age,omitempty"`
	Abilities   []SpecialAbility     `protobuf:"varint,8,rep,packed,name=abilities,proto3,enum=fbaa.SpecialAbility" json:"abilities,omitempty"`
	Attributes  map[string]string    `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Available   bool                 `protobuf:"varint,10,opt,name=available,proto3" json:"available,omitempty"`
	BranchId    string               `protobuf:"bytes,11,opt,name=branchId,proto3" json:"branchId,omitempty"`
}

func (x *CreatureResponse) Reset() {
	*x = CreatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fbaa_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatureResponse) ProtoMessage() {}

func (x *CreatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fbaa_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatureResponse.ProtoReflect.Descriptor instead.
func (*CreatureResponse) Descriptor() ([]byte, []int) {
	return file_fbaa_proto_rawDescGZIP(), []int{0}
}

func (x *CreatureResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreatureResponse) GetDateAdded() *timestamp.Timestamp {
	if x != nil {
		return x.DateAdded
	}
	return nil
}

func (x *CreatureResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatureResponse) GetRarity() Rarity {
	if x != nil {
		return x.Rarity
	}
	return Rarity_COMMON
}

func (x *CreatureResponse) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *CreatureResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatureResponse) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *CreatureResponse) GetAbilities() []SpecialAbility {
	if x != nil {
		return x.Abilities
	}
	return nil
}

func (x *CreatureResponse) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CreatureResponse) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *CreatureResponse) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

type AddCreatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Rarity      Rarity            `protobuf:"varint,2,opt,name=rarity,proto3,enum=fbaa.Rarity" json:"rarity,omitempty"`
	Species     string            `protobuf:"bytes,3,opt,name=species,proto3" json:"species,omitempty"`
	Description string            `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Age         int32             `protobuf:"varint,5,opt,name=age,proto3" json:"age,omitempty"`
	Abilities   []SpecialAbility  `protobuf:"varint,6,rep,packed,name=abilities,proto3,enum=fbaa.SpecialAbility" json:"abilities,omitempty"`
	Attributes  map[string]string `protobuf:"bytes,7,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddCreatureRequest) Reset() {
	*x = AddCreatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fbaa_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCreatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCreatureRequest) ProtoMessage() {}

func (x *AddCreatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fbaa_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCreatureRequest.ProtoReflect.Descriptor instead.
func (*AddCreatureRequest) Descriptor() ([]byte, []int) {
	return file_fbaa_proto_rawDescGZIP(), []int{1}
}

func (x *AddCreatureRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddCreatureRequest) GetRarity() Rarity {
	if x != nil {
		return x.Rarity
	}
	return Rarity_COMMON
}

func (x *AddCreatureRequest) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *AddCreatureRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddCreatureRequest) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *AddCreatureRequest) GetAbilities() []SpecialAbility {
	if x != nil {
		return x.Abilities
	}
	return nil
}

func (x *AddCreatureRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ListCreatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter fantastic beasts by rarity.
	Rarity []Rarity `protobuf:"varint,1,rep,packed,name=rarity,proto3,enum=fbaa.Rarity" json:"rarity,omitempty"`
	// Filter fantastic beasts by special abilities.
	Ability []SpecialAbility `protobuf:"varint,2,rep,packed,name=ability,proto3,enum=fbaa.SpecialAbility" json:"ability,omitempty"`
	// Filter fantastic beasts by availability.
	Available bool `protobuf:"varint,3,opt,name=available,proto3" json:"available,omitempty"`
	// Filter fantastic beasts by branch.
	BranchId string `protobuf:"bytes,4,opt,name=branchId,proto3" json:"branchId,omitempty"`
}

func (x *ListCreatureRequest) Reset() {
	*x = ListCreatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fbaa_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCreatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCreatureRequest) ProtoMessage() {}

func (x *ListCreatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fbaa_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCreatureRequest.ProtoReflect.Descriptor instead.
func (*ListCreatureRequest) Descriptor() ([]byte, []int) {
	return file_fbaa_proto_rawDescGZIP(), []int{2}
}

func (x *ListCreatureRequest) GetRarity() []Rarity {
	if x != nil {
		return x.Rarity
	}
	return nil
}

func (x *ListCreatureRequest) GetAbility() []SpecialAbility {
	if x != nil {
		return x.Ability
	}
	return nil
}

func (x *ListCreatureRequest) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *ListCreatureRequest) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

type GetCreatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCreatureRequest) Reset() {
	*x = GetCreatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fbaa_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCreatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCreatureRequest) ProtoMessage() {}

func (x *GetCreatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fbaa_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCreatureRequest.ProtoReflect.Descriptor instead.
func (*GetCreatureRequest) Descriptor() ([]byte, []int) {
	return file_fbaa_proto_rawDescGZIP(), []int{3}
}

func (x *GetCreatureRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReserveCreatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BranchId string `protobuf:"bytes,2,opt,name=branchId,proto3" json:"branchId,omitempty"`
}

func (x *ReserveCreatureRequest) Reset() {
	*x = ReserveCreatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fbaa_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveCreatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveCreatureRequest) ProtoMessage() {}

func (x *ReserveCreatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fbaa_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveCreatureRequest.ProtoReflect.Descriptor instead.
func (*ReserveCreatureRequest) Descriptor() ([]byte, []int) {
	return file_fbaa_proto_rawDescGZIP(), []int{4}
}

func (x *ReserveCreatureRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReserveCreatureRequest) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

var File_fbaa_proto protoreflect.FileDescriptor

var file_fbaa_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x66, 0x62, 0x61, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x66, 0x62,
	0x61, 0x61, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd9, 0x03, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x66, 0x62, 0x61, 0x61, 0x2e, 0x52, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x62, 0x61,
	0x61, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x66, 0x62, 0x61, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x1a, 0x3d, 0x0a,
	0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9, 0x02, 0x0a,
	0x12, 0x41, 0x64, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x66, 0x62, 0x61, 0x61, 0x2e, 0x52,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x66, 0x62, 0x61, 0x61, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x48, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x62, 0x61, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x66, 0x62, 0x61, 0x61, 0x2e, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x06,
	0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x62, 0x61, 0x61, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x07, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64,
	0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x2a, 0x3b, 0x0a, 0x06,
	0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x52, 0x41, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45,
	0x47, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x03, 0x2a, 0xb0, 0x01, 0x0a, 0x0e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x4c, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x45, 0x4c, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49,
	0x4e, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x48, 0x41, 0x50, 0x45, 0x53, 0x48, 0x49, 0x46, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x54, 0x48, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x4c, 0x45, 0x50, 0x41, 0x54, 0x48,
	0x59, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43,
	0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x32, 0x9f, 0x02, 0x0a,
	0x04, 0x46, 0x42, 0x41, 0x41, 0x12, 0x41, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x2e, 0x66, 0x62, 0x61, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x66, 0x62, 0x61, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x66, 0x62, 0x61, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x41, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x18, 0x2e, 0x66, 0x62, 0x61, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x66, 0x62, 0x61, 0x61,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x2e, 0x66, 0x62, 0x61, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x16,
	0x5a, 0x06, 0x2e, 0x2f, 0x66, 0x62, 0x61, 0x61, 0xaa, 0x02, 0x0b, 0x47, 0x72, 0x70, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fbaa_proto_rawDescOnce sync.Once
	file_fbaa_proto_rawDescData = file_fbaa_proto_rawDesc
)

func file_fbaa_proto_rawDescGZIP() []byte {
	file_fbaa_proto_rawDescOnce.Do(func() {
		file_fbaa_proto_rawDescData = protoimpl.X.CompressGZIP(file_fbaa_proto_rawDescData)
	})
	return file_fbaa_proto_rawDescData
}

var file_fbaa_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_fbaa_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_fbaa_proto_goTypes = []interface{}{
	(Rarity)(0),                    // 0: fbaa.Rarity
	(SpecialAbility)(0),            // 1: fbaa.SpecialAbility
	(*CreatureResponse)(nil),       // 2: fbaa.CreatureResponse
	(*AddCreatureRequest)(nil),     // 3: fbaa.AddCreatureRequest
	(*ListCreatureRequest)(nil),    // 4: fbaa.ListCreatureRequest
	(*GetCreatureRequest)(nil),     // 5: fbaa.GetCreatureRequest
	(*ReserveCreatureRequest)(nil), // 6: fbaa.ReserveCreatureRequest
	nil,                            // 7: fbaa.CreatureResponse.AttributesEntry
	nil,                            // 8: fbaa.AddCreatureRequest.AttributesEntry
	(*timestamp.Timestamp)(nil),    // 9: google.protobuf.Timestamp
	(*empty.Empty)(nil),            // 10: google.protobuf.Empty
}
var file_fbaa_proto_depIdxs = []int32{
	9,  // 0: fbaa.CreatureResponse.dateAdded:type_name -> google.protobuf.Timestamp
	0,  // 1: fbaa.CreatureResponse.rarity:type_name -> fbaa.Rarity
	1,  // 2: fbaa.CreatureResponse.abilities:type_name -> fbaa.SpecialAbility
	7,  // 3: fbaa.CreatureResponse.attributes:type_name -> fbaa.CreatureResponse.AttributesEntry
	0,  // 4: fbaa.AddCreatureRequest.rarity:type_name -> fbaa.Rarity
	1,  // 5: fbaa.AddCreatureRequest.abilities:type_name -> fbaa.SpecialAbility
	8,  // 6: fbaa.AddCreatureRequest.attributes:type_name -> fbaa.AddCreatureRequest.AttributesEntry
	0,  // 7: fbaa.ListCreatureRequest.rarity:type_name -> fbaa.Rarity
	1,  // 8: fbaa.ListCreatureRequest.ability:type_name -> fbaa.SpecialAbility
	3,  // 9: fbaa.FBAA.AddCreature:input_type -> fbaa.AddCreatureRequest
	4,  // 10: fbaa.FBAA.ListCreatures:input_type -> fbaa.ListCreatureRequest
	5,  // 11: fbaa.FBAA.GetCreature:input_type -> fbaa.GetCreatureRequest
	6,  // 12: fbaa.FBAA.ReserveCreature:input_type -> fbaa.ReserveCreatureRequest
	10, // 13: fbaa.FBAA.AddCreature:output_type -> google.protobuf.Empty
	2,  // 14: fbaa.FBAA.ListCreatures:output_type -> fbaa.CreatureResponse
	2,  // 15: fbaa.FBAA.GetCreature:output_type -> fbaa.CreatureResponse
	10, // 16: fbaa.FBAA.ReserveCreature:output_type -> google.protobuf.Empty
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_fbaa_proto_init() }
func file_fbaa_proto_init() {
	if File_fbaa_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fbaa_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fbaa_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCreatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fbaa_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCreatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fbaa_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCreatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fbaa_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveCreatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fbaa_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fbaa_proto_goTypes,
		DependencyIndexes: file_fbaa_proto_depIdxs,
		EnumInfos:         file_fbaa_proto_enumTypes,
		MessageInfos:      file_fbaa_proto_msgTypes,
	}.Build()
	File_fbaa_proto = out.File
	file_fbaa_proto_rawDesc = nil
	file_fbaa_proto_goTypes = nil
	file_fbaa_proto_depIdxs = nil
}
