// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: fbaa.proto

package fbaa

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FBAAClient is the client API for FBAA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FBAAClient interface {
	// Adds a creature
	AddCreature(ctx context.Context, in *Creature, opts ...grpc.CallOption) (*empty.Empty, error)
	// List creatures
	ListCreatures(ctx context.Context, in *ListCreatureRequest, opts ...grpc.CallOption) (FBAA_ListCreaturesClient, error)
	// Gets a creature
	GetCreature(ctx context.Context, in *GetCreatureRequest, opts ...grpc.CallOption) (*Creature, error)
	// Reserves a creature
	ReserveCreature(ctx context.Context, in *ReserveCreatureRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type fBAAClient struct {
	cc grpc.ClientConnInterface
}

func NewFBAAClient(cc grpc.ClientConnInterface) FBAAClient {
	return &fBAAClient{cc}
}

func (c *fBAAClient) AddCreature(ctx context.Context, in *Creature, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fbaa.FBAA/AddCreature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fBAAClient) ListCreatures(ctx context.Context, in *ListCreatureRequest, opts ...grpc.CallOption) (FBAA_ListCreaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FBAA_ServiceDesc.Streams[0], "/fbaa.FBAA/ListCreatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &fBAAListCreaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FBAA_ListCreaturesClient interface {
	Recv() (*Creature, error)
	grpc.ClientStream
}

type fBAAListCreaturesClient struct {
	grpc.ClientStream
}

func (x *fBAAListCreaturesClient) Recv() (*Creature, error) {
	m := new(Creature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fBAAClient) GetCreature(ctx context.Context, in *GetCreatureRequest, opts ...grpc.CallOption) (*Creature, error) {
	out := new(Creature)
	err := c.cc.Invoke(ctx, "/fbaa.FBAA/GetCreature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fBAAClient) ReserveCreature(ctx context.Context, in *ReserveCreatureRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fbaa.FBAA/ReserveCreature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FBAAServer is the server API for FBAA service.
// All implementations should embed UnimplementedFBAAServer
// for forward compatibility
type FBAAServer interface {
	// Adds a creature
	AddCreature(context.Context, *Creature) (*empty.Empty, error)
	// List creatures
	ListCreatures(*ListCreatureRequest, FBAA_ListCreaturesServer) error
	// Gets a creature
	GetCreature(context.Context, *GetCreatureRequest) (*Creature, error)
	// Reserves a creature
	ReserveCreature(context.Context, *ReserveCreatureRequest) (*empty.Empty, error)
}

// UnimplementedFBAAServer should be embedded to have forward compatible implementations.
type UnimplementedFBAAServer struct {
}

func (UnimplementedFBAAServer) AddCreature(context.Context, *Creature) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCreature not implemented")
}
func (UnimplementedFBAAServer) ListCreatures(*ListCreatureRequest, FBAA_ListCreaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCreatures not implemented")
}
func (UnimplementedFBAAServer) GetCreature(context.Context, *GetCreatureRequest) (*Creature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreature not implemented")
}
func (UnimplementedFBAAServer) ReserveCreature(context.Context, *ReserveCreatureRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveCreature not implemented")
}

// UnsafeFBAAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FBAAServer will
// result in compilation errors.
type UnsafeFBAAServer interface {
	mustEmbedUnimplementedFBAAServer()
}

func RegisterFBAAServer(s grpc.ServiceRegistrar, srv FBAAServer) {
	s.RegisterService(&FBAA_ServiceDesc, srv)
}

func _FBAA_AddCreature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Creature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FBAAServer).AddCreature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fbaa.FBAA/AddCreature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FBAAServer).AddCreature(ctx, req.(*Creature))
	}
	return interceptor(ctx, in, info, handler)
}

func _FBAA_ListCreatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCreatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FBAAServer).ListCreatures(m, &fBAAListCreaturesServer{stream})
}

type FBAA_ListCreaturesServer interface {
	Send(*Creature) error
	grpc.ServerStream
}

type fBAAListCreaturesServer struct {
	grpc.ServerStream
}

func (x *fBAAListCreaturesServer) Send(m *Creature) error {
	return x.ServerStream.SendMsg(m)
}

func _FBAA_GetCreature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FBAAServer).GetCreature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fbaa.FBAA/GetCreature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FBAAServer).GetCreature(ctx, req.(*GetCreatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FBAA_ReserveCreature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveCreatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FBAAServer).ReserveCreature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fbaa.FBAA/ReserveCreature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FBAAServer).ReserveCreature(ctx, req.(*ReserveCreatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FBAA_ServiceDesc is the grpc.ServiceDesc for FBAA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FBAA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fbaa.FBAA",
	HandlerType: (*FBAAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCreature",
			Handler:    _FBAA_AddCreature_Handler,
		},
		{
			MethodName: "GetCreature",
			Handler:    _FBAA_GetCreature_Handler,
		},
		{
			MethodName: "ReserveCreature",
			Handler:    _FBAA_ReserveCreature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCreatures",
			Handler:       _FBAA_ListCreatures_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fbaa.proto",
}
